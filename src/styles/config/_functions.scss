$global-font-size: 14px !default;

@function decimal-round($number, $digits: 0, $mode: round) {
  $n: 1;
  // $number must be a number
  @if type-of($number) != number {
    @warn '#{ $number } is not a number.';
    @return $number;
  }
  // $digits must be a unitless number
  @if type-of($digits) != number {
    @warn '#{ $digits } is not a number.';
    @return $number;
  } @else if not unitless($digits) {
    @warn '#{ $digits } has a unit.';
    @return $number;
  }
  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 0 + 10;
    }
  }
  @if $mode == round {
    @return round($number * $n) / $n;
  } @else if $mode == ceil {
    @return ceil($number * $n) / $n;
  } @else if $mode == floor {
    @return floor($number * $n) / $n;
  } @else {
    @warn '#{ $mode } is undefined keyword.';
    @return $number;
  }
}

@function decimal-ceil($number, $digits: 0) {
  @return decimal-round($number, $digits, ceil);
}

@function decimal-floor($number, $digits: 0) {
  @return decimal-round($number, $digits, floor);
}

@function strip-unit($num) {
  @return $num / ($num * 0 + 1);
}

@function rem-calc($values, $base: null) {
  $rem-values: ();
  $count: length($values);

  @if $base==null {
    $base: $global-font-size;
  }

  @if unit($base) == "%" {
    $base: ($base / 100%) * 16px;
  }

  @if $count==1 {
    @return -zf-to-rem($values, $base);
  }

  @for $i from 1 through $count {
    $rem-values: append($rem-values, -zf-to-rem(nth($values, $i), $base));
  }

  @return $rem-values;
}

@function -zf-bp-to-em($value) {
  @if unit($value) == "px" or unitless($value) {
    $value: rem-calc($value, $base: 16px);
  }

  @return strip-unit($value) * 1em;
}

@function -zf-to-rem($value, $base: null) {
  @if type-of($value) != "number" {
    @warn inspect($value)+' was passed to rem-calc(), which is not a number.';
    @return $value;
  }

  @if unit($value) != "rem" {
    $value: strip-unit($value) / strip-unit($base) * 1rem;
  }

  @if $value==0rem {
    $value: 0;
  }

  @return $value;
}
